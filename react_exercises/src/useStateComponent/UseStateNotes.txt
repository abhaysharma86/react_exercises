What is useState?
-----------------

useState is a hook in React that allows you to add state to your functional components. 
State refers to data or variables that change over time or in response to user interactions, 
and React needs to know when this data changes in order to update the UI.

Real-Life Example:
------------------

Imagine you're at a coffee shop and you order a coffee. The coffee shop's system keeps track of the number of coffees you've ordered:

State: The number of coffees you’ve ordered (could change over time, like when you order more).

Updating State: Every time you add another coffee to your order, the system needs to update the count.

React: React (the UI) is like the coffee shop's order screen. When the system updates the order count, React re-renders the screen with the new coffee count.

How does this work?
useState(0):

useState takes an initial value (here, 0, meaning no coffees ordered yet).

coffeeCount is the current state (number of coffees).

setCoffeeCount is a function that allows us to update coffeeCount.

orderCoffee function:

This function is called when the user clicks the "Order Coffee" button.

It updates the state by calling setCoffeeCount(coffeeCount + 1) to increase the coffee count by 1.

Displaying the State:

The number of coffees ordered (coffeeCount) is displayed in the paragraph (<p>).

Every time the coffeeCount state is updated, React automatically re-renders the component to show the new value.

Step 2: The UI Updates
Initially, the page will show: "You've ordered 0 coffee(s)."

When you click the "Order Coffee" button, the state updates, and the UI automatically changes to: "You've ordered 1 coffee(s)."

If you click the button again, the count goes to 2, and so on.

Simple Explanation:
useState is like a container where you store data that can change.

You initialize it with a value (e.g., 0 coffees).

When you want to change the data (e.g., add 1 coffee), you use the set function provided by useState (e.g., setCoffeeCount()).

Every time the state changes, React automatically updates the UI to reflect the new value.

Why Do We Need It?
Without state, React components are static and don’t respond to user interactions. 
State allows your app to be dynamic and interactive. In our coffee example, 
the number of coffees ordered changes as you interact with the button, which is exactly what we want in a dynamic web app.




-----------------------------------------------------------------------------------------------------------

Ways to Use useState in React:
1. Basic State with Primitive Values (e.g., Numbers, Strings, Booleans)

2. State with Objects

3. State with Arrays

4. Multiple State Variables

5. Lazy Initialization

6. Handling State Updates Based on Previous State